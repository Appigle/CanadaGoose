name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

# Add permissions for code scanning
permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  # Source Stage: Integrate with version control repository
  source:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Source Stage - Repository Integration
        run: |
          echo "✅ Source Stage: Successfully integrated with version control repository"
          echo "Repository: ${{ github.repository }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"

  # Code Scanning Stage (Bonus)
  code-scanning:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run npm audit for Node.js dependencies
        run: |
          echo "🔍 Running npm audit for client dependencies..."
          cd CanadaGoose/client
          npm audit --audit-level=moderate || true

          echo "🔍 Running npm audit for server dependencies..."
          cd ../server
          npm audit --audit-level=moderate || true

      - name: Code Scanning Results Summary
        run: |
          echo "✅ Code Scanning Stage: Vulnerability scan completed"
          echo "Results available in GitHub Security tab"

  # Build Stage: Compile/build application and validate infrastructure
  build:
    runs-on: ubuntu-latest
    needs: [source, code-scanning]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js for client
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: CanadaGoose/client/package-lock.json

      - name: Setup Node.js for server
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: CanadaGoose/server/package-lock.json

      - name: Install frontend dependencies
        run: |
          cd CanadaGoose/client
          npm ci

      - name: Install backend dependencies
        run: |
          cd CanadaGoose/server
          npm ci

      - name: Build frontend application
        run: |
          cd CanadaGoose/client
          npm run build
          echo "✅ Frontend build completed successfully"

      - name: Setup Docker
        uses: docker/setup-buildx-action@v3

      - name: Validate infrastructure templates
        run: |
          echo "🔍 Validating Docker Compose configuration..."
          cd CanadaGoose

          # Try newer docker compose syntax first, fallback to docker-compose
          if command -v docker &> /dev/null; then
            if docker compose version &> /dev/null; then
              echo "✅ Using docker compose (newer syntax)"
              docker compose config
              echo "✅ Docker Compose validation completed"
            else
              echo "⚠️  Installing docker-compose..."
              sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
              docker-compose config
              echo "✅ Docker Compose validation completed"
            fi
          else
            echo "⚠️  Docker not available, skipping validation"
            echo "   This step will run in production environment"
          fi

      - name: Build Stage Summary
        run: |
          echo "✅ Build Stage: Application compiled and infrastructure validated"

  # Test Stage: Run automated tests with code coverage
  test:
    runs-on: ubuntu-latest
    needs: [build]
    services:
      mysql:
        image: mysql:8.0.36 # pin for stability (optional but recommended)
        env:
          MYSQL_ROOT_PASSWORD: rootpass
          MYSQL_DATABASE: webapp_db
          MYSQL_USER: webapp_user
          MYSQL_PASSWORD: webapp_pass
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h 127.0.0.1 -u root -prootpass"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10
          --health-start-period=60s

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js for client
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: CanadaGoose/client/package-lock.json

      - name: Setup Node.js for server
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: CanadaGoose/server/package-lock.json

      - name: Install dependencies
        run: |
          cd CanadaGoose/client && npm ci
          cd ../server && npm ci

      - name: Install MySQL client tools
        run: |
          echo "🔧 Installing MySQL client tools..."
          sudo apt-get update
          sudo apt-get install -y mysql-client
          echo "✅ MySQL client tools installed"

      - name: Check MySQL container status
        run: |
          echo "🔍 Checking MySQL container status..."
          docker ps -a
          echo "📊 MySQL container logs:"
          docker logs $(docker ps -aq --filter "ancestor=mysql:8.0.36") || echo "No MySQL container found"

      - name: Setup and initialize database
        run: |
          echo "🔧 Setting up database schema..."
          cd CanadaGoose/server

          # Wait for MySQL to be ready with better error handling
          echo "⏳ Waiting for MySQL to be ready..."
          for i in {1..60}; do
            if mysql -h 127.0.0.1 -P 3306 -u root -prootpass -e "SELECT 1" >/dev/null 2>&1; then
              echo "✅ MySQL is ready!"
              break
            fi
            echo "⏳ Attempt $i/60: MySQL not ready yet, waiting..."
            sleep 3
          done

          # Final availability check
          if ! mysql -h 127.0.0.1 -P 3306 -u root -prootpass -e "SELECT 1" >/dev/null 2>&1; then
            echo "❌ MySQL is not accessible after waiting"
            echo "🔍 Dumping MySQL container logs for debugging..."
            docker ps -a
            docker logs $(docker ps -aq --filter "name=mysql") || true
            exit 1
          fi

          # Debug: Check current directory and file existence
          echo "🔍 Debug: Current directory: $(pwd)"
          echo "🔍 Debug: Checking for init.sql file..."
          ls -la database/ || echo "database/ directory not found"
          ls -la || echo "Current directory listing failed"

          # Initialize database schema with better error handling
          echo "📊 Initializing database schema..."
          if [ -f "database/init.sql" ]; then
            echo "✅ Found init.sql, using it to initialize schema..."
            if mysql -h 127.0.0.1 -P 3306 -u root -prootpass webapp_db < database/init.sql; then
              echo "✅ Database schema initialized from init.sql"
            else
              echo "❌ Failed to initialize from init.sql"
              exit 1
            fi
          else
            echo "⚠️  init.sql not found, creating basic schema..."
            # Create a temporary SQL file to avoid heredoc syntax issues
            echo "CREATE TABLE IF NOT EXISTS users (id INT AUTO_INCREMENT PRIMARY KEY, username VARCHAR(255) UNIQUE NOT NULL, email VARCHAR(255) UNIQUE NOT NULL, password VARCHAR(255) NOT NULL, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP);" > /tmp/create_schema.sql
            if mysql -h 127.0.0.1 -P 3306 -u root -prootpass webapp_db < /tmp/create_schema.sql; then
              echo "✅ Basic database schema created"
              rm /tmp/create_schema.sql
            else
              echo "❌ Failed to create basic schema"
              rm -f /tmp/create_schema.sql
              exit 1
            fi
          fi

          # Verify tables exist with error handling
          echo "🔍 Verifying database tables..."
          if mysql -h 127.0.0.1 -P 3306 -u root -prootpass webapp_db -e "SHOW TABLES;"; then
            echo "✅ Tables verified successfully"
          else
            echo "❌ Failed to verify tables"
            exit 1
          fi

          echo "✅ Database setup completed"

      - name: Run backend tests with coverage
        env:
          NODE_ENV: test
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_USER: root
          DB_PASSWORD: rootpass
          DB_NAME: webapp_db
          JWT_SECRET: chiputaobutuputaopibuchiputaopibuchiputaodaotuputaopi
        run: |
          cd CanadaGoose/server
          npm run test:coverage || npm test
          echo "✅ Backend tests completed"

      - name: Run frontend tests with coverage
        run: |
          cd CanadaGoose/client
          npm run test:coverage || npm run test:unit
          echo "✅ Frontend tests completed"

      - name: Run Cypress E2E tests
        uses: cypress-io/github-action@v5
        with:
          working-directory: CanadaGoose/client
          start: npm run dev
          wait-on: 'http://localhost:5173'
          wait-on-timeout: 120
        env:
          NODE_ENV: test

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Set up Google Chrome
        uses: browser-actions/setup-chrome@v1

      - name: Set up Chromedriver
        uses: nanasess/setup-chromedriver@v2

      - name: Install Selenium dependencies
        run: |
          cd CanadaGoose/client/selenium/e2e
          python -m venv venv
          source venv/bin/activate
          pip install selenium webdriver-manager

      - name: Install curl for health checks
        run: |
          echo "🔧 Installing curl for health checks..."
          sudo apt-get update
          sudo apt-get install -y curl
          echo "✅ curl installed"

      - name: Run Selenium E2E tests
        env:
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_USER: root
          DB_PASSWORD: rootpass
          DB_NAME: webapp_db
          JWT_SECRET: chiputaobutuputaopibuchiputaopibuchiputaodaotuputaopi
          BACKEND_PORT: 3000
          NODE_ENV: test
        run: |
          # Store the original directory
          ORIGINAL_DIR=$(pwd)
          echo "🔍 Original directory: $ORIGINAL_DIR"

          cd CanadaGoose/client/selenium/e2e
          source venv/bin/activate
          chmod +x test.run.sh

          # Start backend server in background with database environment variables
          echo "🔧 Starting backend server for Selenium tests..."
          cd "$ORIGINAL_DIR/CanadaGoose/server"

          # Install backend dependencies if not already installed
          echo "📦 Installing backend dependencies..."
          npm ci

          # Set database environment variables for the backend
          export DB_HOST=127.0.0.1
          export DB_PORT=3306
          export DB_USER=root
          export DB_PASSWORD=rootpass
          export DB_NAME=webapp_db
          export JWT_SECRET=chiputaobutuputaopibuchiputaopibuchiputaodaotuputaopi
          export NODE_ENV=test

          npm run dev &
          BACKEND_PID=$!
          cd "$ORIGINAL_DIR/CanadaGoose/client/selenium/e2e"

          # Wait for backend to be ready
          echo "⏳ Waiting for backend server to be ready..."
          for i in {1..30}; do
            if curl -s http://localhost:3000/api/healthcheck >/dev/null 2>&1; then
              echo "✅ Backend server is ready!"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "❌ Backend server failed to start within timeout"
              echo "🔍 Checking backend server logs..."
              ps aux | grep "npm run dev" | grep -v grep || echo "Backend process not found"
              exit 1
            fi
            echo "⏳ Attempt $i/30: Backend not ready yet, waiting..."
            sleep 2
          done

          # Start frontend server in background
          echo "🔧 Starting frontend server for Selenium tests..."
          cd "$ORIGINAL_DIR/CanadaGoose/client"

          # Install frontend dependencies if not already installed
          echo "📦 Installing frontend dependencies..."
          npm ci

          npm run dev &
          FRONTEND_PID=$!
          cd "$ORIGINAL_DIR/CanadaGoose/client/selenium/e2e"

          # Wait for frontend to be ready
          echo "⏳ Waiting for frontend server to be ready..."
          for i in {1..30}; do
            if curl -s http://localhost:5173 >/dev/null 2>&1; then
              echo "✅ Frontend server is ready!"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "❌ Frontend server failed to start within timeout"
              echo "🔍 Checking frontend server logs..."
              ps aux | grep "npm run dev" | grep -v grep || echo "Frontend process not found"
              exit 1
            fi
            echo "⏳ Attempt $i/30: Frontend not ready yet, waiting..."
            sleep 2
          done

          # Run the improved test script
          echo "🧪 Running Selenium E2E tests..."
          ./test.run.sh

          # Cleanup background processes
          echo "🧹 Cleaning up background processes..."
          if [ ! -z "$BACKEND_PID" ]; then
            kill $BACKEND_PID 2>/dev/null || true
          fi
          if [ ! -z "$FRONTEND_PID" ]; then
            kill $FRONTEND_PID 2>/dev/null || true
          fi

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: |
            CanadaGoose/client/coverage/lcov.info
            CanadaGoose/server/coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Test Stage Summary
        run: |
          echo "✅ Test Stage: Comprehensive automated tests completed with code coverage"
          echo "📊 Coverage reports uploaded to Codecov"
          echo "🧪 Tests included: Backend unit tests, Frontend unit tests, Cypress E2E tests, Selenium E2E tests"

  # Deploy Stage: Echo deployed
  deploy:
    runs-on: ubuntu-latest
    needs: [test]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Deploy Stage
        run: |
          echo "🚀 Deploy Stage: Application deployed successfully!"
          echo "Environment: Production"
          echo "Timestamp: $(date)"
          echo "Commit: ${{ github.sha }}"
          echo "Deployment completed at: $(date -u +'%Y-%m-%d %H:%M:%S UTC')"

  # Summary Job
  summary:
    runs-on: ubuntu-latest
    needs: [source, code-scanning, build, test, deploy]
    if: always()
    steps:
      - name: CI/CD Pipeline Summary
        run: |
          echo "🎉 CI/CD Pipeline Summary"
          echo "========================"
          echo "✅ Source Stage: Repository integration completed"
          echo "✅ Code Scanning: Vulnerability scan completed"
          echo "✅ Build Stage: Application built and validated"
          echo "✅ Test Stage: Tests completed with coverage"
          echo "🧪 Testing includes: Unit tests, Integration tests, Cypress E2E tests, Selenium E2E tests"
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "✅ Deploy Stage: Application deployed"
          else
            echo "⏭️  Deploy Stage: Skipped (not on main branch)"
          fi
          echo "========================"
          echo "Pipeline Status: ${{ job.status }}"
