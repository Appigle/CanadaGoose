name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

# Add permissions for code scanning
permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  # Source Stage: Integrate with version control repository
  source:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Source Stage - Repository Integration
        run: |
          echo "‚úÖ Source Stage: Successfully integrated with version control repository"
          echo "Repository: ${{ github.repository }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"

  # Code Scanning Stage (Bonus)
  code-scanning:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run npm audit for Node.js dependencies
        run: |
          echo "üîç Running npm audit for client dependencies..."
          cd CanadaGoose/client
          npm audit --audit-level=moderate || true

          echo "üîç Running npm audit for server dependencies..."
          cd ../server
          npm audit --audit-level=moderate || true

      - name: Code Scanning Results Summary
        run: |
          echo "‚úÖ Code Scanning Stage: Vulnerability scan completed"
          echo "Results available in GitHub Security tab"

  # Build Stage: Compile/build application and validate infrastructure
  build:
    runs-on: ubuntu-latest
    needs: [source, code-scanning]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js for client
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: CanadaGoose/client/package-lock.json

      - name: Setup Node.js for server
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: CanadaGoose/server/package-lock.json

      - name: Install frontend dependencies
        run: |
          cd CanadaGoose/client
          npm ci

      - name: Install backend dependencies
        run: |
          cd CanadaGoose/server
          npm ci

      - name: Build frontend application
        run: |
          cd CanadaGoose/client
          npm run build
          echo "‚úÖ Frontend build completed successfully"

      - name: Setup Docker
        uses: docker/setup-buildx-action@v3

      - name: Validate infrastructure templates
        run: |
          echo "üîç Validating Docker Compose configuration..."
          cd CanadaGoose

          # Try newer docker compose syntax first, fallback to docker-compose
          if command -v docker &> /dev/null; then
            if docker compose version &> /dev/null; then
              echo "‚úÖ Using docker compose (newer syntax)"
              docker compose config
              echo "‚úÖ Docker Compose validation completed"
            else
              echo "‚ö†Ô∏è  Installing docker-compose..."
              sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
              docker-compose config
              echo "‚úÖ Docker Compose validation completed"
            fi
          else
            echo "‚ö†Ô∏è  Docker not available, skipping validation"
            echo "   This step will run in production environment"
          fi

      - name: Build Stage Summary
        run: |
          echo "‚úÖ Build Stage: Application compiled and infrastructure validated"

  # Test Stage: Run automated tests with code coverage
  test:
    runs-on: ubuntu-latest
    needs: [build]
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: rootpass
          MYSQL_DATABASE: webapp_db
          MYSQL_USER: webapp_user
          MYSQL_PASSWORD: webapp_pass
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js for client
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: CanadaGoose/client/package-lock.json

      - name: Setup Node.js for server
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: CanadaGoose/server/package-lock.json

      - name: Install dependencies
        run: |
          cd CanadaGoose/client && npm ci
          cd ../server && npm ci

      - name: Run backend tests with coverage
        env:
          NODE_ENV: test
          DB_HOST: localhost
          DB_PORT: 3306
          DB_USER: root
          DB_PASSWORD: rootpass
          DB_NAME: webapp_db
          JWT_SECRET: chiputaobutuputaopibuchiputaopibuchiputaodaotuputaopi
        run: |
          cd CanadaGoose/server
          npm run test:coverage || npm test
          echo "‚úÖ Backend tests completed"

      - name: Run frontend tests with coverage
        run: |
          cd CanadaGoose/client
          npm run test:coverage || npm run test:unit
          echo "‚úÖ Frontend tests completed"

      - name: Run Cypress E2E tests
        uses: cypress-io/github-action@v5
        with:
          working-directory: CanadaGoose/client
          start: npm run dev
          wait-on: 'http://localhost:3000'
          wait-on-timeout: 120
        env:
          NODE_ENV: test

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Set up Google Chrome
        uses: browser-actions/setup-chrome@v1

      - name: Set up Chromedriver
        uses: nanasess/setup-chromedriver@v2

      - name: Install Selenium dependencies
        run: |
          cd CanadaGoose/client/selenium/e2e
          python -m venv venv
          source venv/bin/activate
          pip install selenium webdriver-manager

      - name: Run Selenium E2E tests
        run: |
          cd CanadaGoose/client/selenium/e2e
          source venv/bin/activate
          chmod +x test.run.sh
          ./test.run.sh

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: |
            CanadaGoose/client/coverage/lcov.info
            CanadaGoose/server/coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Test Stage Summary
        run: |
          echo "‚úÖ Test Stage: Comprehensive automated tests completed with code coverage"
          echo "üìä Coverage reports uploaded to Codecov"
          echo "üß™ Tests included: Backend unit tests, Frontend unit tests, Cypress E2E tests, Selenium E2E tests"

  # Deploy Stage: Echo deployed
  deploy:
    runs-on: ubuntu-latest
    needs: [test]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Deploy Stage
        run: |
          echo "üöÄ Deploy Stage: Application deployed successfully!"
          echo "Environment: Production"
          echo "Timestamp: $(date)"
          echo "Commit: ${{ github.sha }}"
          echo "Deployment completed at: $(date -u +'%Y-%m-%d %H:%M:%S UTC')"

  # Summary Job
  summary:
    runs-on: ubuntu-latest
    needs: [source, code-scanning, build, test, deploy]
    if: always()
    steps:
      - name: CI/CD Pipeline Summary
        run: |
          echo "üéâ CI/CD Pipeline Summary"
          echo "========================"
          echo "‚úÖ Source Stage: Repository integration completed"
          echo "‚úÖ Code Scanning: Vulnerability scan completed"
          echo "‚úÖ Build Stage: Application built and validated"
          echo "‚úÖ Test Stage: Tests completed with coverage"
          echo "üß™ Testing includes: Unit tests, Integration tests, Cypress E2E tests, Selenium E2E tests"
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "‚úÖ Deploy Stage: Application deployed"
          else
            echo "‚è≠Ô∏è  Deploy Stage: Skipped (not on main branch)"
          fi
          echo "========================"
          echo "Pipeline Status: ${{ job.status }}"
