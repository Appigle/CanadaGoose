name: CI/CD Pipeline

on:
  push:
    branches: [main, feature/cicd]
  pull_request:
    branches: [main, feature/cicd]

# Add permissions for code scanning
permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  source:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Source Stage - Repository Integration
        run: |
          echo "✅ Source Stage: Successfully integrated with version control repository"
          echo "Repository: ${{ github.repository }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"

  code-scanning:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run npm audit for Node.js dependencies
        run: |
          echo "🔍 Running npm audit for client dependencies..."
          cd CanadaGoose/client
          npm audit --audit-level=moderate || true

          echo "🔍 Running npm audit for server dependencies..."
          cd ../server
          npm audit --audit-level=moderate || true

      - name: Code Scanning Results Summary
        run: |
          echo "✅ Code Scanning Stage: Vulnerability scan completed"
          echo "Results available in GitHub Security tab"

  build:
    runs-on: ubuntu-latest
    needs: [source, code-scanning]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js for client
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: CanadaGoose/client/package-lock.json

      - name: Setup Node.js for server
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: CanadaGoose/server/package-lock.json

      - name: Install frontend dependencies
        run: |
          cd CanadaGoose/client
          npm ci

      - name: Install backend dependencies
        run: |
          cd CanadaGoose/server
          npm ci

      - name: Build frontend application
        run: |
          cd CanadaGoose/client
          npm run build:prod || npm run build
          echo "✅ Frontend build completed successfully"

      - name: Setup Docker
        uses: docker/setup-buildx-action@v3

      - name: Validate infrastructure templates
        run: |
          echo "🔍 Validating Docker Compose configuration..."
          cd CanadaGoose

          # Try newer docker compose syntax first, fallback to docker-compose
          if command -v docker &> /dev/null; then
            if docker compose version &> /dev/null; then
              echo "✅ Using docker compose (newer syntax)"
              docker compose config
              echo "✅ Docker Compose validation completed"
            else
              echo "⚠️  Installing docker-compose..."
              sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
              docker-compose config
              echo "✅ Docker Compose validation completed"
            fi
          else
            echo "⚠️  Docker not available, skipping validation"
            echo "   This step will run in production environment"
          fi

      - name: Build Stage Summary
        run: |
          echo "✅ Build Stage: Application compiled and infrastructure validated"

  test:
    runs-on: ubuntu-latest
    needs: [build]
    services:
      mysql:
        image: mysql:8.0.36
        env:
          MYSQL_ROOT_PASSWORD: rootpass
          MYSQL_DATABASE: webapp_db
          MYSQL_USER: webapp_user
          MYSQL_PASSWORD: webapp_pass
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h 127.0.0.1 -u root -prootpass"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10
          --health-start-period=60s

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js for client
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: CanadaGoose/client/package-lock.json

      - name: Setup Node.js for server
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: CanadaGoose/server/package-lock.json

      - name: Install dependencies
        run: |
          cd CanadaGoose/client && npm ci
          cd ../server && npm ci

      - name: Install MySQL client tools
        run: |
          echo "🔧 Installing MySQL client tools..."
          sudo apt-get update
          sudo apt-get install -y mysql-client
          echo "✅ MySQL client tools installed"

      - name: Check MySQL container status
        run: |
          echo "🔍 Checking MySQL container status..."
          docker ps -a
          echo "📊 MySQL container logs:"
          docker logs $(docker ps -aq --filter "ancestor=mysql:8.0.36") || echo "No MySQL container found"

      - name: Setup and initialize database
        run: |
          echo "🔧 Setting up database schema..."
          cd CanadaGoose/server

          # Wait for MySQL to be ready with better error handling
          echo "⏳ Waiting for MySQL to be ready..."
          for i in {1..60}; do
            if mysql -h 127.0.0.1 -P 3306 -u root -prootpass -e "SELECT 1" >/dev/null 2>&1; then
              echo "✅ MySQL is ready!"
              break
            fi
            echo "⏳ Attempt $i/60: MySQL not ready yet, waiting..."
            sleep 3
          done

          # Final availability check
          if ! mysql -h 127.0.0.1 -P 3306 -u root -prootpass -e "SELECT 1" >/dev/null 2>&1; then
            echo "❌ MySQL is not accessible after waiting"
            echo "🔍 Dumping MySQL container logs for debugging..."
            docker ps -a
            docker logs $(docker ps -aq --filter "name=mysql") || true
            exit 1
          fi

          # Debug: Check current directory and file existence
          echo "🔍 Debug: Current directory: $(pwd)"
          echo "🔍 Debug: Checking for init.sql file..."
          ls -la database/ || echo "database/ directory not found"
          ls -la || echo "Current directory listing failed"

          # Initialize database schema with better error handling
          echo "📊 Initializing database schema..."
          if [ -f "database/init.sql" ]; then
            echo "✅ Found init.sql, using it to initialize schema..."
            if mysql -h 127.0.0.1 -P 3306 -u root -prootpass webapp_db < database/init.sql; then
              echo "✅ Database schema initialized from init.sql"
            else
              echo "❌ Failed to initialize from init.sql"
              exit 1
            fi
          else
            echo "⚠️  init.sql not found, creating basic schema..."
            # Create a temporary SQL file to avoid heredoc syntax issues
            echo "CREATE TABLE IF NOT EXISTS users (id INT AUTO_INCREMENT PRIMARY KEY, username VARCHAR(255) UNIQUE NOT NULL, email VARCHAR(255) UNIQUE NOT NULL, password VARCHAR(255) NOT NULL, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP);" > /tmp/create_schema.sql
            if mysql -h 127.0.0.1 -P 3306 -u root -prootpass webapp_db < /tmp/create_schema.sql; then
              echo "✅ Basic database schema created"
              rm /tmp/create_schema.sql
            else
              echo "❌ Failed to create basic schema"
              rm -f /tmp/create_schema.sql
              exit 1
            fi
          fi

          # Verify tables exist with error handling
          echo "🔍 Verifying database tables..."
          if mysql -h 127.0.0.1 -P 3306 -u root -prootpass webapp_db -e "SHOW TABLES;"; then
            echo "✅ Tables verified successfully"
          else
            echo "❌ Failed to verify tables"
            exit 1
          fi

          echo "✅ Database setup completed"

      - name: Run backend tests with coverage
        env:
          NODE_ENV: test
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_USER: root
          DB_PASSWORD: rootpass
          DB_NAME: webapp_db
          JWT_SECRET: chiputaobutuputaopibuchiputaopibuchiputaodaotuputaopi
        run: |
          cd CanadaGoose/server
          npm run test:coverage || npm test
          echo "✅ Backend tests completed"

      - name: Run frontend tests with coverage
        run: |
          cd CanadaGoose/client
          npm run test:coverage || npm run test:unit
          echo "✅ Frontend tests completed"

      - name: Run Cypress E2E tests
        uses: cypress-io/github-action@v5
        with:
          working-directory: CanadaGoose/client
          start: npm run dev
          wait-on: 'http://localhost:5173'
          wait-on-timeout: 120
        env:
          NODE_ENV: test

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Set up Google Chrome
        uses: browser-actions/setup-chrome@v1

      - name: Set up Chromedriver
        uses: nanasess/setup-chromedriver@v2

      - name: Install Selenium dependencies
        run: |
          cd CanadaGoose/client/selenium/e2e
          python -m venv venv
          source venv/bin/activate
          pip install selenium webdriver-manager

      - name: Install curl for health checks
        run: |
          echo "🔧 Installing curl for health checks..."
          sudo apt-get update
          sudo apt-get install -y curl
          echo "✅ curl installed"

      - name: Run Selenium E2E tests
        env:
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_USER: root
          DB_PASSWORD: rootpass
          DB_NAME: webapp_db
          JWT_SECRET: chiputaobutuputaopibuchiputaopibuchiputaodaotuputaopi
          BACKEND_PORT: 3000
          NODE_ENV: test
        run: |
          # Store the original directory
          ORIGINAL_DIR=$(pwd)
          echo "🔍 Original directory: $ORIGINAL_DIR"

          cd CanadaGoose/client/selenium/e2e
          source venv/bin/activate
          chmod +x test.run.sh

          # Start backend server in background with database environment variables
          echo "🔧 Starting backend server for Selenium tests..."
          cd "$ORIGINAL_DIR/CanadaGoose/server"

          # Install backend dependencies if not already installed
          echo "📦 Installing backend dependencies..."
          npm ci

          # Set database environment variables for the backend
          export DB_HOST=127.0.0.1
          export DB_PORT=3306
          export DB_USER=root
          export DB_PASSWORD=rootpass
          export DB_NAME=webapp_db
          export JWT_SECRET=chiputaobutuputaopibuchiputaopibuchiputaodaotuputaopi
          export NODE_ENV=test

          npm run dev &
          BACKEND_PID=$!
          cd "$ORIGINAL_DIR/CanadaGoose/client/selenium/e2e"

          # Wait for backend to be ready
          echo "⏳ Waiting for backend server to be ready..."
          for i in {1..30}; do
            if curl -s http://localhost:3000/api/healthcheck >/dev/null 2>&1; then
              echo "✅ Backend server is ready!"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "❌ Backend server failed to start within timeout"
              echo "🔍 Checking backend server logs..."
              ps aux | grep "npm run dev" | grep -v grep || echo "Backend process not found"
              exit 1
            fi
            echo "⏳ Attempt $i/30: Backend not ready yet, waiting..."
            sleep 2
          done

          # Start frontend server in background
          echo "🔧 Starting frontend server for Selenium tests..."
          cd "$ORIGINAL_DIR/CanadaGoose/client"

          # Install frontend dependencies if not already installed
          echo "📦 Installing frontend dependencies..."
          npm ci

          npm run dev &
          FRONTEND_PID=$!
          cd "$ORIGINAL_DIR/CanadaGoose/client/selenium/e2e"

          # Wait for frontend to be ready
          echo "⏳ Waiting for frontend server to be ready..."
          for i in {1..30}; do
            if curl -s http://localhost:5173 >/dev/null 2>&1; then
              echo "✅ Frontend server is ready!"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "❌ Frontend server failed to start within timeout"
              echo "🔍 Checking frontend server logs..."
              ps aux | grep "npm run dev" | grep -v grep || echo "Frontend process not found"
              exit 1
            fi
            echo "⏳ Attempt $i/30: Frontend not ready yet, waiting..."
            sleep 2
          done

          # Run the improved test script
          echo "🧪 Running Selenium E2E tests..."
          ./test.run.sh

          # Cleanup background processes
          echo "🧹 Cleaning up background processes..."
          if [ ! -z "$BACKEND_PID" ]; then
            kill $BACKEND_PID 2>/dev/null || true
          fi
          if [ ! -z "$FRONTEND_PID" ]; then
            kill $FRONTEND_PID 2>/dev/null || true
          fi

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: |
            CanadaGoose/client/coverage/lcov.info
            CanadaGoose/server/coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Test Stage Summary
        run: |
          echo "✅ Test Stage: Comprehensive automated tests completed with code coverage"
          echo "📊 Coverage reports uploaded to Codecov"
          echo "🧪 Tests included: Backend unit tests, Frontend unit tests, Cypress E2E tests, Selenium E2E tests"

  deploy-backend:
    runs-on: ubuntu-latest
    needs: [test]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/feature/cicd'
    environment: production
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: CanadaGoose/server/package-lock.json

      - name: Install Backend Dependencies
        run: |
          cd CanadaGoose/server
          npm ci

      - name: Setup SSH for EC2
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.AWS_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.AWS_EC2_IP }} >> ~/.ssh/known_hosts

      - name: Deploy Backend to AWS EC2
        run: |
          cd CanadaGoose/server

          # Create production package
          echo "📦 Creating production package..."
          tar -czf canadagoose-server-prod.tar.gz \
            app.js package.json package-lock.json \
            config/ routes/ middleware/ database/ test/ \
            scripts/ env.example setup-env.sh

          # Upload to EC2
          echo "📤 Uploading to EC2..."
          scp canadagoose-server-prod.tar.gz ${{ secrets.AWS_SSH_USER }}@${{ secrets.AWS_EC2_IP }}:/tmp/

          # Deploy on EC2 using your existing script logic
          echo "🔧 Deploying on EC2..."
          ssh ${{ secrets.AWS_SSH_USER }}@${{ secrets.AWS_EC2_IP }} '
            echo "🚀 Starting server deployment on EC2..."
            
            # Check if deployment package exists
            if [ ! -f "/tmp/canadagoose-server-prod.tar.gz" ]; then
              echo "❌ Deployment package not found!"
              exit 1
            fi
            
            # Create backup of current deployment
            echo "💾 Creating backup..."
            if [ -d "/opt/app/server" ]; then
              sudo cp -r /opt/app/server /opt/app/server.backup.$(date +%Y%m%d_%H%M%S)
              echo "✅ Backup created"
            fi
            
            # Stop PM2 process if running
            echo "🛑 Stopping PM2 process..."
            if pm2 list | grep -q "canadagoose-server"; then
              pm2 stop canadagoose-server
              pm2 delete canadagoose-server
              echo "✅ PM2 process stopped and removed"
            else
              echo "ℹ️  No PM2 process found"
            fi
            
            # Extract new deployment
            echo "📁 Extracting deployment package..."
            cd /tmp
            tar -xzf canadagoose-server-prod.tar.gz --warning=no-timestamp --warning=no-unknown-keyword 2>/dev/null || {
              echo "⚠️  Some tar warnings occurred (normal on macOS), continuing with deployment..."
            }
            
            # Deploy to application directory
            echo "📁 Deploying to /opt/app/server..."
            sudo mkdir -p /opt/app/server
            sudo rm -rf /opt/app/server/*
            
            # Copy files while excluding macOS-specific files
            echo "📋 Copying application files..."
            for item in *; do
              if [ "$item" != "__MACOSX" ] && [ "$item" != ".DS_Store" ] && [ "$item" != ".*" ]; then
                sudo cp -r "$item" /opt/app/server/
              fi
            done
            
            # Set correct permissions
            echo "🔐 Setting permissions..."
            sudo chown -R ec2-user:ec2-user /opt/app/server
            sudo chmod -R 755 /opt/app/server
            
            # Install production dependencies
            echo "📦 Installing production dependencies..."
            cd /opt/app/server
            npm install --production
            
            # Create .env file from env.example
            echo "📁 Setting up environment..."
            if [ -f "env.example" ]; then
              cp env.example .env
              echo "✅ Created .env file from env.example"
            else
              echo "⚠️  Warning: env.example not found"
            fi
            
            # Start PM2 process
            echo "🚀 Starting PM2 process..."
            pm2 start app.js --name "canadagoose-server" --env production
            pm2 save
            pm2 startup
            
            # Clean up temporary files
            echo "🧹 Cleaning up..."
            rm -rf /tmp/* /tmp/.* 2>/dev/null || true
            
            # Test deployment
            echo "�� Testing deployment..."
            sleep 5  # Wait for server to start
            
            if pm2 list | grep -q "canadagoose-server.*online"; then
              echo "✅ PM2 process is running"
              echo "📊 Process info:"
              pm2 show canadagoose-server
              
              # Test API endpoint
              echo "🌐 Testing API endpoint..."
              if curl -s http://localhost:3000/api/healthcheck | grep -q "status"; then
                echo "✅ API is responding correctly"
              else
                echo "⚠️  API may not be fully ready yet"
              fi
              
              # Test version endpoint
              echo "🏷️  Testing version endpoint..."
              if curl -s http://localhost:3000/api/version | grep -q "version"; then
                echo "✅ Version endpoint is responding correctly"
                echo "📋 Version information:"
                curl -s http://localhost:3000/api/version | jq -r ".version, .name, .environment" 2>/dev/null || {
                  echo "   Version: $(curl -s http://localhost:3000/api/version | grep -o "\"version\":\"[^\"]*\"" | cut -d"\"" -f4)"
                  echo "   Name: $(curl -s http://localhost:3000/api/version | grep -o "\"name\":\"[^\"]*\"" | cut -d"\"" -f4)"
                  echo "   Environment: $(curl -s http://localhost:3000/api/version | grep -o "\"environment\":\"[^\"]*\"" | cut -d"\"" -f4)"
                }
              else
                echo "⚠️  Version endpoint may not be fully ready yet"
              fi
              
              # Test database connection on EC2
              echo "��️  Testing database connection on EC2..."
              if node -e "
              const { testConnection } = require("./config/database");
              testConnection()
                .then(success => {
                  if (success) {
                    console.log(\"✅ Database connection successful on EC2\");
                    process.exit(0);
                  } else {
                    console.log(\"❌ Database connection failed on EC2\");
                    process.exit(1);
                  }
                })
                .catch(err => {
                  console.error(\"❌ Database test error on EC2:\", err.message);
                  process.exit(1);
                });
              "; then
                echo "✅ Database connection test passed on EC2"
              else
                echo "❌ Database connection test failed on EC2"
                echo "Please check RDS configuration and security groups"
                exit 1
              fi
            else
              echo "❌ PM2 process failed to start!"
              echo "📋 PM2 logs:"
              pm2 logs canadagoose-server --lines 10
              exit 1
            fi
            
            echo "✅ Server deployment completed successfully!"
          '

      - name: Backend Deployment Summary
        run: |
          echo "✅ Backend deployment completed successfully!"
          echo "🌐 Server available at: http://${{ secrets.AWS_EC2_IP }}:3000"
          echo "📊 API endpoints:"
          echo "   - Health: http://${{ secrets.AWS_EC2_IP }}:3000/api/healthcheck"
          echo "   - Version: http://${{ secrets.AWS_EC2_IP }}:3000/api/version"

  deploy-frontend:
    runs-on: ubuntu-latest
    needs: [test]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/feature/cicd'
    environment: production
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: CanadaGoose/client/package-lock.json

      - name: Install Frontend Dependencies
        run: |
          cd CanadaGoose/client
          npm ci

      - name: Build Frontend for Production
        run: |
          cd CanadaGoose/client
          npm run build:prod || npm run build
          echo "✅ Frontend build completed"

      - name: Setup SSH for EC2
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.AWS_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.AWS_EC2_IP }} >> ~/.ssh/known_hosts

      - name: Deploy Frontend to AWS EC2
        run: |
          cd CanadaGoose/client

          # Create production package
          echo "📦 Creating production package..."
          tar -czf canadagoose-client-prod.tar.gz \
            --exclude=.DS_Store \
            --exclude=__MACOSX \
            --exclude="*.xattr" \
            --exclude="._*" \
            --exclude=".*" \
            dist/

          # Upload to EC2
          echo "📤 Uploading to EC2..."
          scp canadagoose-client-prod.tar.gz ${{ secrets.AWS_SSH_USER }}@${{ secrets.AWS_EC2_IP }}:/tmp/

          # Deploy on EC2 using your existing script logic
          echo "🔧 Deploying on EC2..."
          ssh ${{ secrets.AWS_SSH_USER }}@${{ secrets.AWS_EC2_IP }} '
            echo "🚀 Starting deployment on EC2..."
            
            # Extract build files
            echo "📦 Extracting build files..."
            cd /tmp
            if [ ! -f "canadagoose-client-prod.tar.gz" ]; then
              echo "❌ Deployment package not found!"
              exit 1
            fi
            
            # Extract with error handling for macOS-specific issues
            echo "📁 Extracting deployment package..."
            tar -xzf canadagoose-client-prod.tar.gz --warning=no-timestamp --warning=no-unknown-keyword 2>/dev/null || {
              echo "⚠️  Some tar warnings occurred (normal on macOS), continuing with deployment..."
            }
            
            # Backup current deployment
            echo "💾 Creating backup..."
            if [ -d "/var/www/app" ]; then
              sudo cp -r /var/www/app /var/www/app.backup.$(date +%Y%m%d_%H%M%S)
              echo "✅ Backup created"
            fi
            
            # Deploy to application directory
            echo "📁 Deploying to /var/www/app..."
            sudo mkdir -p /var/www/app
            sudo rm -rf /var/www/app/*
            
            # Copy files while excluding macOS-specific files
            echo "📋 Copying application files..."
            if [ -d "dist" ]; then
              for item in dist/*; do
                # Skip macOS-specific files and hidden files
                if [[ "$item" != dist/__MACOSX && "$item" != dist/.DS_Store && "$item" != dist/.* && "$item" != dist/._* ]]; then
                  sudo cp -r "$item" /var/www/app/
                  echo "   ✅ Copied: $(basename "$item")"
                else
                  echo "   ⏭️  Skipped: $(basename "$item") (macOS artifact)"
                fi
              done
            else
              echo "❌ dist/ directory not found after extraction!"
              exit 1
            fi
            
            # Set correct permissions
            echo "🔐 Setting permissions..."
            sudo chown -R nginx:nginx /var/www/app
            sudo chmod -R 755 /var/www/app
            
            # Clean up temporary files
            echo "🧹 Cleaning up..."
            rm -rf /tmp/dist /tmp/canadagoose-client-prod.tar.gz
            
            # Restart Nginx to serve new files
            echo "🔄 Restarting Nginx..."
            sudo systemctl restart nginx
            if [ $? -eq 0 ]; then
              echo "✅ Nginx restarted successfully"
            else
              echo "⚠️  Nginx restart failed, trying reload instead..."
              sudo systemctl reload nginx
              if [ $? -eq 0 ]; then
                echo "✅ Nginx reloaded successfully"
              else
                echo "❌ Nginx reload failed! Check nginx status manually"
              fi
            fi
            
            # Test deployment
            echo "�� Testing deployment..."
            if [ -f "/var/www/app/index.html" ]; then
              echo "✅ index.html found"
              echo "�� File count: $(ls -1 /var/www/app/ | wc -l)"
              echo "📁 Contents:"
              ls -la /var/www/app/
              
              # Test if the app is accessible
              echo "🌐 Testing app accessibility..."
              if curl -s http://localhost/app | grep -q "CanadaGoose"; then
                echo "✅ App is accessible and contains expected content"
              else
                echo "⚠️  App accessible but content may be different"
              fi
              
              # Check Nginx status
              echo "🔍 Checking Nginx status..."
              if sudo systemctl is-active --quiet nginx; then
                echo "✅ Nginx is running and active"
              else
                echo "❌ Nginx is not running!"
                echo "   Status: $(sudo systemctl status nginx --no-pager -l | head -3)"
              fi
            else
              echo "❌ index.html not found!"
              exit 1
            fi
            
            echo "✅ Deployment completed successfully!"
          '

      - name: Frontend Deployment Summary
        run: |
          echo "✅ Frontend deployment completed successfully!"
          echo "🌐 App available at: http://${{ secrets.AWS_EC2_IP }}/app"
          echo "📊 Static files served from: /var/www/app"

  deployment-verification:
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/feature/cicd'
    environment: production
    steps:
      - name: Wait for Services
        run: sleep 30

      - name: Verify Backend Health
        run: |
          echo "🔍 Verifying backend health..."
          curl -f http://${{ secrets.AWS_EC2_IP }}:3000/api/healthcheck || exit 1
          curl -f http://${{ secrets.AWS_EC2_IP }}:3000/api/version || exit 1
          echo "✅ Backend health checks passed"

      - name: Verify Frontend
        run: |
          echo "�� Verifying frontend..."
          curl -f http://${{ secrets.AWS_EC2_IP }}/app || exit 1
          curl -f http://${{ secrets.AWS_EC2_IP }}/app/index.html || exit 1
          echo "✅ Frontend verification passed"

      - name: Verify Production URLs
        run: |
          echo "🔍 Verifying production URLs..."
          curl -f http://s25cicd.xiaopotato.top/api/healthcheck || exit 1
          curl -f http://s25cicd.xiaopotato.top/app || exit 1
          echo "✅ Production URL verification passed"

      - name: Deployment Verification Summary
        run: |
          echo "�� All deployment verifications passed!"
          echo "✅ Backend: http://${{ secrets.AWS_EC2_IP }}:3000"
          echo "✅ Frontend: http://${{ secrets.AWS_EC2_IP }}/app"
          echo "✅ Production: http://s25cicd.xiaopotato.top"

  summary:
    runs-on: ubuntu-latest
    needs:
      [
        source,
        code-scanning,
        build,
        test,
        deploy-backend,
        deploy-frontend,
        deployment-verification,
      ]
    if: always()
    steps:
      - name: CI/CD Pipeline Summary
        run: |
          echo "🎉 CI/CD Pipeline Summary"
          echo "========================"
          echo "✅ Source Stage: Repository integration completed"
          echo "✅ Code Scanning: Vulnerability scan completed"
          echo "✅ Build Stage: Application built and validated"
          echo "✅ Test Stage: Tests completed with coverage"
          echo "🧪 Testing includes: Unit tests, Integration tests, Cypress E2E tests, Selenium E2E tests"
          if [ "${{ needs.deploy-backend.result }}" == "success" ]; then
            echo "✅ Backend Deploy: Successfully deployed to AWS EC2"
          else
            echo "❌ Backend Deploy: Failed"
          fi
          if [ "${{ needs.deploy-frontend.result }}" == "success" ]; then
            echo "✅ Frontend Deploy: Successfully deployed to AWS EC2"
          else
            echo "❌ Frontend Deploy: Failed"
          fi
          if [ "${{ needs.deployment-verification.result }}" == "success" ]; then
            echo "✅ Deployment Verification: All health checks passed"
          else
            echo "❌ Deployment Verification: Failed"
          fi
          echo "========================"
          echo "Pipeline Status: ${{ job.status }}"
